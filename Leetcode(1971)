class Solution {
    private boolean fun(List<Integer>[] arr, int s, int d, boolean[] flag)
    {
        if(s == d)
            return true;
        if(flag[s] == true)
            return false;
        flag[s] = true;
        boolean ans = false;
        for(int k=0; k<arr[s].size(); k++)
        {
            ans = ans || fun(arr, arr[s].get(k), d, flag);
        }   
        return ans;
    }
    public boolean validPath(int n, int[][] edges, int source, int destination) {

        List<Integer>[] arr = new ArrayList[n];
        for(int i=0; i<n; i++)
            arr[i] = new ArrayList<>();

        for(int i=0; i<edges.length; i++)
        {
            int ui = edges[i][0];
            int vi = edges[i][1];

            arr[ui].add(vi);
            arr[vi].add(ui);
        }
        boolean[] flag = new boolean[n];
        return fun(arr, source, destination, flag);
    }
}
